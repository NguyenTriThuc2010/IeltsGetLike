# mainsrs.py - ƒê√£ c·∫≠p nh·∫≠t ƒë·ªÉ d√πng note.py hi·ªÉn th·ªã c·∫£ ghi ch√∫ v√† t·ª´ v·ª±ng
from tkinter import *
from tkinter import messagebox, simpledialog, colorchooser 
import json
import os
import sys
import subprocess

# --- Constants ---
SRS_SCHEDULE_FILE = "srs_schedules.json"
TEMP_SCHEDULE_DATA_FILE = "temp_new_schedule.json"
NOTE_DISPLAY_FILE = "temp_note_display.json" 

FLASHCARDS_MAIN_FILE = "flashcards_data.json" # File ch·ª©a t·∫•t c·∫£ d·ªØ li·ªáu flashcard

# --- Button Styles ---
setting_button = {
    "font": ("Arial", 14),
    "fg": "#000000",
    "bg": "#ffffff",
    "activebackground": "#000000",
    "activeforeground": "#ffffff",
    "bd": 1,
    "relief": "solid",
    "width": 30,
    "anchor": "w"
}

# --- Data Management Functions ---

def load_srs_schedules():
    """T·∫£i c√°c l·ªãch tr√¨nh SRS t·ª´ file JSON v√† ƒë·∫£m b·∫£o ƒë·ªãnh d·∫°ng ƒë√∫ng."""
    if os.path.exists(SRS_SCHEDULE_FILE):
        try:
            with open(SRS_SCHEDULE_FILE, "r", encoding="utf-8") as f:
                loaded_data = json.load(f)
                normalized_schedules = []
                for item in loaded_data:
                    if isinstance(item, str):
                        normalized_schedules.append({
                            "name": item, 
                            "notes": "", 
                            "notes_format": "plaintext", 
                            "colored_sections": [],
                            "selected_units": [] 
                        })
                    elif isinstance(item, dict):
                        if "notes" not in item:
                            item["notes"] = ""
                        if "notes_format" not in item:
                            item["notes_format"] = "plaintext"
                        if "colored_sections" not in item:
                            item["colored_sections"] = []
                        if "selected_units" not in item: 
                            item["selected_units"] = []
                        normalized_schedules.append(item)
                return normalized_schedules
        except json.JSONDecodeError:
            messagebox.showwarning("L·ªói d·ªØ li·ªáu", "Kh√¥ng th·ªÉ ƒë·ªçc l·ªãch tr√¨nh SRS. D·ªØ li·ªáu c√≥ th·ªÉ b·ªã h·ªèng v√† s·∫Ω ƒë∆∞·ª£c kh·ªüi t·∫°o l·∫°i.")
            return []
    return []

def save_srs_schedules(schedules):
    """L∆∞u c√°c l·ªãch tr√¨nh SRS v√†o file JSON."""
    with open(SRS_SCHEDULE_FILE, "w", encoding="utf-8") as f:
        json.dump(schedules, f, ensure_ascii=False, indent=4)

def load_all_flashcards_data():
    """T·∫£i t·∫•t c·∫£ d·ªØ li·ªáu flashcard t·ª´ flashcards_data.json."""
    if os.path.exists(FLASHCARDS_MAIN_FILE):
        try:
            with open(FLASHCARDS_MAIN_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                if isinstance(data, dict): 
                    return data
                else:
                    messagebox.showwarning("L·ªói d·ªØ li·ªáu", "flashcards_data.json c√≥ ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá (kh√¥ng ph·∫£i ƒë·ªëi t∆∞·ª£ng JSON g·ªëc).")
                    return {}
        except json.JSONDecodeError:
            messagebox.showwarning("L·ªói d·ªØ li·ªáu", "Kh√¥ng th·ªÉ ƒë·ªçc flashcards_data.json. D·ªØ li·ªáu c√≥ th·ªÉ b·ªã h·ªèng.")
            return {}
    return {} 

def load_flashcards_from_unit(unit_name):
    """T·∫£i c√°c flashcard cho m·ªôt unit c·ª• th·ªÉ t·ª´ flashcards_data.json."""
    all_data = load_all_flashcards_data()
    return all_data.get(unit_name, []) 

def create_new_unit_via_manager(parent_window):
    """M·ªü flashcard_unit_manager.py ƒë·ªÉ t·∫°o unit m·ªõi ho·∫∑c ch·ªânh s·ª≠a.
    L∆ØU √ù: flashcard_unit_manager.py ch∆∞a ƒë∆∞·ª£c cung c·∫•p, ƒë√¢y ch·ªâ l√† placeholder.
    """
    try:
        python_executable = sys.executable
        # ƒê√¢y l√† m·ªôt placeholder, b·∫°n c·∫ßn file flashcard_unit_manager.py th·ª±c t·∫ø
        messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng n√†y c·∫ßn file 'flashcard_unit_manager.py' ƒë·ªÉ qu·∫£n l√Ω unit. "
                                        "Hi·ªán t·∫°i b·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a file flashcards_data.json tr·ª±c ti·∫øp ho·∫∑c d√πng n√∫t 'Ch·ªânh S·ª≠a T·ª´ V·ª±ng G·ªëc' ƒë·ªÉ ch·ªânh s·ª≠a t·ª´.")
        # V√≠ d·ª• n·∫øu b·∫°n c√≥ file:
        # subprocess.Popen([python_executable, "flashcard_unit_manager.py"]) 
        # messagebox.showinfo("Th√¥ng b√°o", "Vui l√≤ng t·∫°o/ch·ªânh s·ª≠a unit v√† t·ª´ v·ª±ng trong c·ª≠a s·ªï qu·∫£n l√Ω. Sau ƒë√≥, nh·∫•n 'L√†m M·ªõi Danh S√°ch Unit' t·∫°i ƒë√¢y.")
        
    except FileNotFoundError:
        messagebox.showerror("L·ªói", f"Kh√¥ng t√¨m th·∫•y file 'flashcard_unit_manager.py'. Vui l√≤ng ƒë·∫£m b·∫£o file n·∫±m c√πng th∆∞ m·ª•c.")
    except Exception as e:
        messagebox.showerror("L·ªói", f"C√≥ l·ªói x·∫£y ra khi m·ªü 'flashcard_unit_manager.py': {e}")


# --- GUI Management for Schedules ---

def apply_color_to_text_widget_selection(text_widget):
    """√Åp d·ª•ng m√†u s·∫Øc cho vƒÉn b·∫£n ƒë∆∞·ª£c ch·ªçn trong Text widget."""
    try:
        start = text_widget.tag_ranges("sel")[0]
        end = text_widget.tag_ranges("sel")[1]
    except IndexError:
        messagebox.showwarning("Th√¥ng b√°o", "Vui l√≤ng ch·ªçn vƒÉn b·∫£n ƒë·ªÉ t√¥ m√†u.")
        return

    color_code = colorchooser.askcolor(title="Ch·ªçn m√†u vƒÉn b·∫£n")[1]
    if color_code:
        for tag_name in text_widget.tag_names():
            if tag_name.startswith("color_"):
                text_widget.tag_remove(tag_name, start, end)

        tag_name = f"color_{color_code.replace('#', '')}"
        text_widget.tag_config(tag_name, foreground=color_code)
        text_widget.tag_add(tag_name, start, end)

def open_edit_notes_window(index, srs_schedules, schedule_list_frame):
    """M·ªü c·ª≠a s·ªï ch·ªânh s·ª≠a ghi ch√∫ ri√™ng bi·ªát."""
    current_data = srs_schedules[index]
    old_notes_text = current_data.get("notes", "")
    old_colored_sections = current_data.get("colored_sections", [])

    edit_notes_win = Toplevel(schedule_list_frame) 
    edit_notes_win.title(f"S·ª≠a Ghi Ch√∫ cho '{current_data['name']}'")
    edit_notes_win.geometry("600x450")
    edit_notes_win.transient(schedule_list_frame.winfo_toplevel()) 
    edit_notes_win.grab_set() 

    edit_notes_win.update_idletasks()
    x = edit_notes_win.winfo_screenwidth() // 2 - edit_notes_win.winfo_width() // 2
    y = edit_notes_win.winfo_screenheight() // 2 - edit_notes_win.winfo_height() // 2
    edit_notes_win.geometry(f"+{x}+{y}")

    Label(edit_notes_win, text=f"Ghi ch√∫ cho: {current_data['name']}",
          font=("Arial", 14, "bold"), pady=10).pack()

    text_notes = Text(edit_notes_win, font=("Arial", 11), wrap=WORD, bd=1, relief="solid", height=15)
    text_notes.pack(fill=BOTH, expand=True, padx=10, pady=5)

    notes_scrollbar = Scrollbar(edit_notes_win, command=text_notes.yview)
    notes_scrollbar.pack(side=RIGHT, fill="y")
    text_notes.config(yscrollcommand=notes_scrollbar.set)

    text_notes.insert(END, old_notes_text)
    for section in old_colored_sections:
        start_index = section["start"]
        end_index = section["end"]
        color = section["color"]

        tag_name = f"color_{color.replace('#', '')}"
        if tag_name not in text_notes.tag_names():
            text_notes.tag_config(tag_name, foreground=color)
        text_notes.tag_add(tag_name, start_index, end_index)

    color_button = Button(edit_notes_win, text="üé® T√¥ m√†u vƒÉn b·∫£n ch·ªçn",
                          command=lambda: apply_color_to_text_widget_selection(text_notes),
                          font=("Arial", 10), bg="#add8e6", fg="#333", padx=5, pady=2)
    color_button.pack(pady=5)

    def save_notes_changes():
        new_notes_text = text_notes.get("1.0", END).strip()
        new_colored_sections = []
        for tag_name in text_notes.tag_names():
            if tag_name.startswith("color_"):
                tag_config = text_notes.tag_cget(tag_name, "foreground")
                ranges = text_notes.tag_ranges(tag_name)
                for i in range(0, len(ranges), 2):
                    start_index = ranges[i]
                    end_index = ranges[i+1]
                    new_colored_sections.append({
                        "start": str(start_index),
                        "end": str(end_index),
                        "color": tag_config
                    })
        
        srs_schedules[index]["notes"] = new_notes_text
        srs_schedules[index]["colored_sections"] = new_colored_sections
        save_srs_schedules(srs_schedules)
        refresh_schedule_display(schedule_list_frame, srs_schedules)
        messagebox.showinfo("Th√†nh c√¥ng", "Ghi ch√∫ ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!")
        edit_notes_win.destroy()

    def cancel_notes_changes():
        edit_notes_win.destroy()

    button_frame = Frame(edit_notes_win, pady=10)
    button_frame.pack()

    Button(button_frame, text="L∆∞u Ghi Ch√∫", command=save_notes_changes,
           font=("Arial", 12, "bold"), bg="#28a745", fg="white", padx=10, pady=5).pack(side=LEFT, padx=5)
    Button(button_frame, text="H·ªßy", command=cancel_notes_changes,
           font=("Arial", 12), bg="#dc3545", fg="white", padx=10, pady=5).pack(side=RIGHT, padx=5)

    edit_notes_win.protocol("WM_DELETE_WINDOW", cancel_notes_changes)
    edit_notes_win.focus_set()


def refresh_schedule_display(schedule_list_frame, srs_schedules):
    """L√†m m·ªõi hi·ªÉn th·ªã danh s√°ch l·ªãch tr√¨nh."""
    for widget in schedule_list_frame.winfo_children():
        widget.destroy()

    if not srs_schedules:
        Label(schedule_list_frame, text="Ch∆∞a c√≥ l·ªãch tr√¨nh n√†o. H√£y th√™m m·ªõi!",
              font=("Arial", 12), fg="gray", bg="white").pack(pady=10)
        return

    for i, schedule_data in enumerate(srs_schedules):
        schedule_row_frame = Frame(schedule_list_frame, bg="#e0e0e0", bd=1, relief="solid", padx=5, pady=5)
        schedule_row_frame.pack(fill=X, pady=3)

        text_frame = Frame(schedule_row_frame, bg="#e0e0e0")
        text_frame.pack(side=LEFT, padx=5, pady=2, expand=True, fill=X)

        Label(text_frame, text=f"L·ªãch tr√¨nh: {schedule_data['name']}",
              font=("Arial", 12, "bold"), bg="#e0e0e0", wraplength=400, justify=LEFT).pack(anchor="w")
        
        display_notes = schedule_data["notes"]
        if len(display_notes) > 100:
            display_notes = display_notes[:97] + "..."
        if display_notes:
            Label(text_frame, text=f"Ghi ch√∫: {display_notes}",
                  font=("Arial", 10, "italic"), bg="#e0e0e0", fg="#666", wraplength=400, justify=LEFT).pack(anchor="w")
        else:
            Label(text_frame, text="Ch∆∞a c√≥ ghi ch√∫.",
                  font=("Arial", 10, "italic"), bg="#e0e0e0", fg="#888", wraplength=400, justify=LEFT).pack(anchor="w")
        
        selected_units_count = len(schedule_data.get("selected_units", []))
        Label(text_frame, text=f"Unit ƒë√£ ch·ªçn: {selected_units_count} unit(s)",
              font=("Arial", 9, "italic"), bg="#e0e0e0", fg="#444", wraplength=400, justify=LEFT).pack(anchor="w")


        button_actions_frame = Frame(schedule_row_frame, bg="#e0e0e0")
        button_actions_frame.pack(side=RIGHT)
        
        Button(button_actions_frame, text="‚öôÔ∏è C√†i ƒë·∫∑t Unit",
               command=lambda data=schedule_data, idx=i: open_schedule_unit_settings(data, idx, srs_schedules, schedule_list_frame),
               font=("Arial", 9), bg="#6c757d", fg="white", bd=0, padx=5, pady=2).pack(side=LEFT, padx=2)

        Button(button_actions_frame, text="üìñ Xem",
               command=lambda data=schedule_data: view_detailed_notes(data),
               font=("Arial", 9), bg="#4CAF50", fg="white", bd=0, padx=5, pady=2).pack(side=LEFT, padx=2)

        Button(button_actions_frame, text="üìù S·ª≠a Ghi ch√∫",
               command=lambda idx=i: open_edit_notes_window(idx, srs_schedules, schedule_list_frame),
               font=("Arial", 9), bg="#ffc107", fg="#333", bd=0, padx=5, pady=2).pack(side=LEFT, padx=2)

        Button(button_actions_frame, text="‚úèÔ∏è S·ª≠a T√™n",
               command=lambda idx=i: edit_srs_schedule(idx, srs_schedules, schedule_list_frame),
               font=("Arial", 9), bg="#007ACC", fg="white", bd=0, padx=5, pady=2).pack(side=LEFT, padx=2)

        Button(button_actions_frame, text="üóëÔ∏è X√≥a",
               command=lambda idx=i: delete_srs_schedule(idx, srs_schedules, schedule_list_frame),
               font=("Arial", 9), bg="#CC0000", fg="white", bd=0, padx=5, pady=2).pack(side=LEFT, padx=2)
        
        # MODIFIED: N√∫t H·ªçc s·∫Ω g·ªçi start_srs_session nh∆∞ tr∆∞·ªõc
        Button(button_actions_frame, text="üöÄ H·ªçc",
               command=lambda data=schedule_data: start_srs_session(data),
               font=("Arial", 9), bg="#28a745", fg="white", bd=0, padx=5, pady=2).pack(side=LEFT, padx=2)

def add_srs_schedule(srs_schedules, schedule_list_frame):
    """
    M·ªü c·ª≠a s·ªï 'datelearn.py' ƒë·ªÉ th√™m l·ªãch tr√¨nh m·ªõi.
    Sau khi datelearn.py ƒë√≥ng, ki·ªÉm tra file t·∫°m ƒë·ªÉ l·∫•y d·ªØ li·ªáu.
    """
    if os.path.exists(TEMP_SCHEDULE_DATA_FILE):
        os.remove(TEMP_SCHEDULE_DATA_FILE)

    try:
        python_executable = sys.executable
        subprocess.run([python_executable, "datelearn.py"], check=True)

        if os.path.exists(TEMP_SCHEDULE_DATA_FILE):
            with open(TEMP_SCHEDULE_DATA_FILE, "r", encoding="utf-8") as f:
                new_schedule_data = json.load(f)
            
            os.remove(TEMP_SCHEDULE_DATA_FILE)

            new_name = new_schedule_data.get("name", "").strip()
            new_notes = new_schedule_data.get("notes", "").strip()
            new_notes_format = new_schedule_data.get("notes_format", "plaintext")
            new_colored_sections = new_schedule_data.get("colored_sections", [])

            if not new_name:
                messagebox.showwarning("L·ªói", "T√™n l·ªãch tr√¨nh kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
                return

            if any(s['name'] == new_name for s in srs_schedules):
                messagebox.showwarning("Tr√πng t√™n", "L·ªãch tr√¨nh v·ªõi t√™n n√†y ƒë√£ t·ªìn t·∫°i.")
                return

            srs_schedules.append({
                "name": new_name, 
                "notes": new_notes,
                "notes_format": new_notes_format,
                "colored_sections": new_colored_sections,
                "selected_units": [] 
            })
            save_srs_schedules(srs_schedules)
            refresh_schedule_display(schedule_list_frame, srs_schedules)
            messagebox.showinfo("Th√†nh c√¥ng", f"L·ªãch tr√¨nh '{new_name}' ƒë√£ ƒë∆∞·ª£c th√™m!")
        else:
            messagebox.showinfo("Th√¥ng b√°o", "B·∫°n ƒë√£ h·ªßy vi·ªác t·∫°o l·ªãch tr√¨nh m·ªõi.")

    except FileNotFoundError:
        messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y file 'datelearn.py'. Vui l√≤ng ƒë·∫£m b·∫£o file n·∫±m c√πng th∆∞ m·ª•c.")
    except Exception as e:
        messagebox.showerror("L·ªói", f"C√≥ l·ªói x·∫£y ra khi m·ªü ho·∫∑c x·ª≠ l√Ω 'datelearn.py': {e}")


def edit_srs_schedule(index, srs_schedules, schedule_list_frame):
    """M·ªü h·ªôp tho·∫°i ƒë·ªÉ s·ª≠a t√™n l·ªãch tr√¨nh."""
    if index < 0 or index >= len(srs_schedules):
        messagebox.showerror("L·ªói", "Ch·ªâ m·ª•c l·ªãch tr√¨nh kh√¥ng h·ª£p l·ªá.")
        return

    current_data = srs_schedules[index]
    old_name = current_data["name"]

    edited_name = simpledialog.askstring("S·ª≠a T√™n L·ªãch Tr√¨nh SRS", f"S·ª≠a T√äN l·ªãch tr√¨nh '{old_name}':",
                                         initialvalue=old_name)
    if not edited_name:
        return

    edited_name = edited_name.strip()
    if not edited_name:
        messagebox.showwarning("L·ªói", "T√™n l·ªãch tr√¨nh kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
        return

    if any(s['name'] == edited_name for i, s in enumerate(srs_schedules) if i != index):
        messagebox.showwarning("Tr√πng t√™n", "L·ªãch tr√¨nh v·ªõi t√™n n√†y ƒë√£ t·ªìn t·∫°i.")
        return
    
    if edited_name != old_name:
        srs_schedules[index]["name"] = edited_name
        save_srs_schedules(srs_schedules)
        refresh_schedule_display(schedule_list_frame, srs_schedules)
        messagebox.showinfo("Th√†nh c√¥ng", "T√™n l·ªãch tr√¨nh ƒë√£ ƒë∆∞·ª£c s·ª≠a!")

def delete_srs_schedule(index, srs_schedules, schedule_list_frame):
    """X√≥a m·ªôt l·ªãch tr√¨nh kh·ªèi danh s√°ch."""
    if index < 0 or index >= len(srs_schedules):
        messagebox.showerror("L·ªói", "Ch·ªâ m·ª•c l·ªãch tr√¨nh kh√¥ng h·ª£p l·ªá.")
        return

    confirm = messagebox.askyesno("X√°c nh·∫≠n X√≥a", f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a l·ªãch tr√¨nh '{srs_schedules[index]['name']}' kh√¥ng?")
    if confirm:
        srs_schedules.pop(index)
        save_srs_schedules(srs_schedules)
        refresh_schedule_display(schedule_list_frame, srs_schedules)
        messagebox.showinfo("X√≥a th√†nh c√¥ng", "L·ªãch tr√¨nh ƒë√£ ƒë∆∞·ª£c x√≥a.")

# --- Functions for Unit Settings and Learning ---

def open_schedule_unit_settings(schedule_data, index, srs_schedules_list, schedule_list_frame):
    """
    M·ªü c·ª≠a s·ªï c√†i ƒë·∫∑t unit cho m·ªôt l·ªãch tr√¨nh c·ª• th·ªÉ.
    Ng∆∞·ªùi d√πng c√≥ th·ªÉ ch·ªçn c√°c unit ƒë·ªÉ h·ªçc cho l·ªãch tr√¨nh n√†y.
    """
    select_units_win = Toplevel(schedule_list_frame)
    select_units_win.title(f"C√†i ƒê·∫∑t Unit cho: {schedule_data['name']}")
    select_units_win.geometry("500x600")
    select_units_win.configure(bg="#f8f8f8")
    select_units_win.transient(schedule_list_frame.winfo_toplevel())
    select_units_win.grab_set()

    select_units_win.update_idletasks()
    x = select_units_win.winfo_screenwidth() // 2 - select_units_win.winfo_width() // 2
    y = select_units_win.winfo_screenheight() // 2 - select_units_win.winfo_height() // 2
    select_units_win.geometry(f"+{x}+{y}")

    Label(select_units_win, text=f"Ch·ªçn C√°c Unit ƒê·ªÉ H·ªçc\ncho l·ªãch tr√¨nh: {schedule_data['name']}",
              font=("Arial", 16, "bold"), bg="#ff8f8f8", pady=15).pack()

    unit_list_frame = Frame(select_units_win, bg="white", bd=1, relief="solid")
    unit_list_frame.pack(fill=BOTH, expand=True, padx=20, pady=10)

    canvas = Canvas(unit_list_frame, bg="white")
    scrollbar = Scrollbar(unit_list_frame, orient="vertical", command=canvas.yview)
    scrollable_frame = Frame(canvas, bg="white")

    scrollable_frame.bind(
        "<Configure>",
        lambda e: canvas.configure(
            scrollregion=canvas.bbox("all")
        )
    )

    canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
    canvas.configure(yscrollcommand=scrollbar.set)

    canvas.pack(side="left", fill="both", expand=True)
    scrollbar.pack(side="right", fill="y")

    current_selected_units_for_this_schedule = schedule_data.get("selected_units", [])
    selected_unit_vars = {} 

    def refresh_unit_display_internal():
        """L√†m m·ªõi hi·ªÉn th·ªã danh s√°ch unit b√™n trong c·ª≠a s·ªï c√†i ƒë·∫∑t."""
        for widget in scrollable_frame.winfo_children():
            widget.destroy()
        selected_unit_vars.clear() 

        all_flashcards_data = load_all_flashcards_data()
        current_units_from_data = list(all_flashcards_data.keys())

        if not current_units_from_data:
            Label(scrollable_frame, text="Ch∆∞a c√≥ unit n√†o trong d·ªØ li·ªáu. H√£y t·∫°o unit m·ªõi!",
                          font=("Arial", 12), fg="gray", bg="white").pack(pady=20)
            Button(scrollable_frame, text="‚ûï T·∫°o Unit M·ªõi",
                           command=lambda: create_new_unit_via_manager(select_units_win), 
                           font=("Arial", 12, "bold"), bg="#007ACC", fg="white", padx=15, pady=8).pack(pady=10)
        else:
            for unit_name in current_units_from_data:
                var = IntVar()
                if unit_name in current_selected_units_for_this_schedule:
                    var.set(1)
                selected_unit_vars[unit_name] = var
                Checkbutton(scrollable_frame, text=unit_name, variable=var,
                                font=("Arial", 12), bg="white", anchor="w", padx=5, pady=2).pack(fill=X)
        
        scrollable_frame.update_idletasks()
        canvas.config(scrollregion=canvas.bbox("all"))

    refresh_unit_display_internal() # Kh·ªüi t·∫°o hi·ªÉn th·ªã l·∫ßn ƒë·∫ßu

    def on_save_selection():
        newly_selected_units = [unit_name for unit_name, var in selected_unit_vars.items() if var.get() == 1]
        
        schedule_data["selected_units"] = newly_selected_units
        save_srs_schedules(srs_schedules_list)
        
        messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ l∆∞u c√°c unit ƒë√£ ch·ªçn cho l·ªãch tr√¨nh '{schedule_data['name']}'.")
        refresh_schedule_display(schedule_list_frame, srs_schedules_list)
        select_units_win.destroy()

    def on_cancel_selection():
        select_units_win.destroy()

    button_frame = Frame(select_units_win, bg="#f8f8f8", pady=10)
    button_frame.pack(pady=10)

    Button(button_frame, text="‚úÖ L∆∞u C√†i ƒê·∫∑t Unit",
               command=on_save_selection,
               font=("Arial", 12, "bold"), bg="#28a745", fg="white", padx=15, pady=8).pack(side=LEFT, padx=10)
    
    Button(button_frame, text="üîÑ L√†m M·ªõi Danh S√°ch Unit",
               command=refresh_unit_display_internal,
               font=("Arial", 10), bg="#007ACC", fg="white", padx=10, pady=5).pack(side=LEFT, padx=10)

    Button(select_units_win, text="H·ªßy", command=on_cancel_selection,
               font=("Arial", 12), bg="#dc3545", fg="white", padx=10, pady=5).pack(pady=5)

    select_units_win.protocol("WM_DELETE_WINDOW", on_cancel_selection)
    select_units_win.wait_window() 

# MODIFIED: H√†m start_srs_session ƒë·ªÉ chu·∫©n b·ªã d·ªØ li·ªáu cho note.py
def start_srs_session(schedule_data):
    """
    H√†m n√†y s·∫Ω ƒë∆∞·ª£c g·ªçi khi ng∆∞·ªùi d√πng nh·∫•n n√∫t 'H·ªçc'.
    N√≥ s·∫Ω t·∫£i c√°c flashcard t·ª´ c√°c unit ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh cho l·ªãch tr√¨nh n√†y
    v√† chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã b·∫±ng note.py.
    """
    selected_units = schedule_data.get("selected_units", [])

    if not selected_units:
        messagebox.showwarning("Th√¥ng b√°o", 
                               "Ch∆∞a c√≥ unit n√†o ƒë∆∞·ª£c ch·ªçn cho l·ªãch tr√¨nh n√†y.\n"
                               "Vui l√≤ng nh·∫•n '‚öôÔ∏è C√†i ƒë·∫∑t Unit' ƒë·ªÉ ch·ªçn c√°c unit c·∫ßn h·ªçc tr∆∞·ªõc.")
        return

    all_flashcards = []
    missing_units_with_data = [] 
    for unit_name in selected_units:
        flashcards_in_unit = load_flashcards_from_unit(unit_name)
        if flashcards_in_unit:
            all_flashcards.extend(flashcards_in_unit)
        else:
            missing_units_with_data.append(unit_name)

    if not all_flashcards:
        messagebox.showerror("L·ªói", 
                             "Kh√¥ng t√¨m th·∫•y th·∫ª n√†o trong c√°c unit ƒë√£ ch·ªçn ho·∫∑c c√°c unit ƒë√≥ kh√¥ng t·ªìn t·∫°i trong d·ªØ li·ªáu.\n"
                             "Vui l√≤ng ki·ªÉm tra l·∫°i 'flashcards_data.json'.")
        if missing_units_with_data:
            messagebox.showwarning("Thi·∫øu d·ªØ li·ªáu Unit", 
                                   f"C√°c unit sau kh√¥ng c√≥ d·ªØ li·ªáu th·∫ª: {', '.join(missing_units_with_data)}")
        return

    # NEW: Chu·∫©n b·ªã d·ªØ li·ªáu flashcard ƒë·ªÉ g·ª≠i t·ªõi note.py
    flashcard_display_data = {
        "display_type": "flashcards", # Lo·∫°i hi·ªÉn th·ªã: flashcards
        "title": f"Danh S√°ch T·ª´ V·ª±ng Cho L·ªãch Tr√¨nh: {schedule_data['name']}",
        "flashcards": all_flashcards, # Danh s√°ch flashcard
        "notes": "", # Tr∆∞·ªùng n√†y c√≥ th·ªÉ r·ªóng n·∫øu ch·ªâ hi·ªÉn th·ªã flashcard
        "notes_format": "plaintext",
        "colored_sections": []
    }

    try:
        python_executable = sys.executable
        # Ghi d·ªØ li·ªáu flashcard v√†o file t·∫°m th·ªùi
        with open(NOTE_DISPLAY_FILE, "w", encoding="utf-8") as f:
            json.dump(flashcard_display_data, f, ensure_ascii=False, indent=4)
        
        # G·ªçi note.py ƒë·ªÉ hi·ªÉn th·ªã flashcard
        subprocess.Popen([python_executable, "note.py", NOTE_DISPLAY_FILE])
        
        messagebox.showinfo("B·∫Øt ƒë·∫ßu h·ªçc SRS", 
                             f"ƒê√£ m·ªü c·ª≠a s·ªï h·ªçc cho l·ªãch tr√¨nh: '{schedule_data['name']}'\n"
                             f"T·ªïng s·ªë th·∫ª: {len(all_flashcards)}")

    except FileNotFoundError:
        messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y file 'note.py'. Vui l√≤ng ƒë·∫£m b·∫£o file n·∫±m c√πng th∆∞ m·ª•c.")
    except Exception as e:
        messagebox.showerror("L·ªói", f"C√≥ l·ªói x·∫£y ra khi m·ªü ho·∫∑c x·ª≠ l√Ω 'note.py': {e}")


def view_detailed_notes(schedule_data):
    """
    M·ªü c·ª≠a s·ªï note.py ƒë·ªÉ hi·ªÉn th·ªã chi ti·∫øt ghi ch√∫.
    Truy·ªÅn d·ªØ li·ªáu ghi ch√∫ v√† ƒë·ªãnh d·∫°ng qua file t·∫°m.
    """
    if os.path.exists(NOTE_DISPLAY_FILE):
        os.remove(NOTE_DISPLAY_FILE)
    
    notes_to_display = {
        "display_type": "notes", # Lo·∫°i hi·ªÉn th·ªã: ghi ch√∫
        "title": f"Ghi ch√∫ cho l·ªãch tr√¨nh: {schedule_data['name']}",
        "notes": schedule_data.get("notes", ""),
        "notes_format": schedule_data.get("notes_format", "plaintext"),
        "colored_sections": schedule_data.get("colored_sections", [])
    }
    
    try:
        python_executable = sys.executable
        with open(NOTE_DISPLAY_FILE, "w", encoding="utf-8") as f:
            json.dump(notes_to_display, f, ensure_ascii=False, indent=4)
        
        subprocess.Popen([python_executable, "note.py", NOTE_DISPLAY_FILE])
    except FileNotFoundError:
        messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y file 'note.py'. Vui l√≤ng ƒë·∫£m b·∫£o file n·∫±m c√πng th∆∞ m·ª•c.")
    except Exception as e:
        messagebox.showerror("L·ªói", f"C√≥ l·ªói x·∫£y ra khi m·ªü ho·∫∑c x·ª≠ l√Ω 'note.py': {e}")

# NEW FUNCTION: Open the vocabulary editor
def open_vocabulary_editor(parent_window):
    """
    M·ªü edit.py ƒë·ªÉ ch·ªânh s·ª≠a tr·ª±c ti·∫øp file flashcards_data.json.
    """
    try:
        python_executable = sys.executable
        edit_script_path = os.path.join(os.path.dirname(__file__), "edit.py")
        
        # Ki·ªÉm tra xem file flashcards_data.json c√≥ t·ªìn t·∫°i kh√¥ng, n·∫øu kh√¥ng th√¨ t·∫°o m·ªõi
        if not os.path.exists(FLASHCARDS_MAIN_FILE):
            with open(FLASHCARDS_MAIN_FILE, "w", encoding="utf-8") as f:
                json.dump({}, f, ensure_ascii=False, indent=4) # T·∫°o m·ªôt JSON r·ªóng

        subprocess.Popen([python_executable, edit_script_path, FLASHCARDS_MAIN_FILE])
    except FileNotFoundError:
        messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y file 'edit.py'. Vui l√≤ng ƒë·∫£m b·∫£o file n·∫±m c√πng th∆∞ m·ª•c.")
    except Exception as e:
        messagebox.showerror("L·ªói", f"C√≥ l·ªói x·∫£y ra khi m·ªü tr√¨nh ch·ªânh s·ª≠a t·ª´ v·ª±ng: {e}")


# --- H√†m t·∫°o v√† hi·ªÉn th·ªã c·ª≠a s·ªï SRS Method ---
def create_srs_method_window(parent_root):
    window_add_srs = Toplevel(parent_root)
    window_add_srs.title("Qu·∫£n l√Ω L·ªãch Tr√¨nh √în T·∫≠p SRS")
    window_add_srs.geometry("750x600")
    window_add_srs.configure(bg="#f0f0f0")

    window_add_srs.grab_set() 

    Label(window_add_srs,
          text="Qu·∫£n l√Ω L·ªãch Tr√¨nh √în T·∫≠p Spaced Repetition",
          font=("Arial", 18, "bold"),
          bg="#f0f0f0",
          fg="#333",
          pady=15, wraplength=700).pack()
    Label(window_add_srs,
          text="T·∫°i ƒë√¢y, b·∫°n s·∫Ω thi·∫øt l·∫≠p v√† qu·∫£n l√Ω c√°c l·ªãch h·ªçc t√πy ch·ªânh c·ªßa m√¨nh ƒë·ªÉ h·ªçc theo ph∆∞∆°ng ph√°p l·∫∑p l·∫°i ng·∫Øt qu√£ng.",
          font=("Arial", 8, "italic"),
          bg="#f0f0f0",
          fg="#555",
          pady=5, wraplength=700).pack()
    
    Button(window_add_srs, text="‚ûï Th√™m L·ªãch Tr√¨nh M·ªõi", 
           command=lambda: add_srs_schedule(srs_schedules, schedule_list_scrollable_frame), 
           **setting_button).pack(pady=10)

    list_canvas = Canvas(window_add_srs, bg="white", bd=0, highlightthickness=0)
    list_scrollbar = Scrollbar(window_add_srs, orient="vertical", command=list_canvas.yview)
    schedule_list_scrollable_frame = Frame(list_canvas, bg="white")

    schedule_list_scrollable_frame.bind(
        "<Configure>",
        lambda e: list_canvas.configure(
            scrollregion=list_canvas.bbox("all")
        )
    )

    list_canvas.create_window((0, 0), window=schedule_list_scrollable_frame, anchor="nw")
    list_canvas.configure(yscrollcommand=list_scrollbar.set)

    list_canvas.pack(side=LEFT, fill=BOTH, expand=True, padx=20, pady=10)
    list_scrollbar.pack(side=RIGHT, fill="y", padx=(0, 20), pady=10)

    srs_schedules = load_srs_schedules() 
    refresh_schedule_display(schedule_list_scrollable_frame, srs_schedules)

    # NEW: N√∫t m·ªü tr√¨nh ch·ªânh s·ª≠a t·ª´ v·ª±ng g·ªëc
    Button(window_add_srs,
           text="‚úèÔ∏è Ch·ªânh S·ª≠a T·ª´ V·ª±ng G·ªëc",
           command=lambda: open_vocabulary_editor(window_add_srs),
           font=("Arial", 12, "bold"),
           bg="#8A2BE2", # M√†u t√≠m ƒë·ªÉ d·ªÖ ph√¢n bi·ªát
           fg="#ffffff",
           bd=0,
           padx=10,
           pady=5).pack(pady=10) # Th√™m padding ƒë·ªÉ t√°ch bi·ªát v·ªõi n√∫t ƒë√≥ng

    Button(window_add_srs,
           text="ƒê√≥ng",
           command=window_add_srs.destroy,
           font=("Arial", 12),
           bg="#CC0000",
           fg="#ffffff",
           bd=0,
           padx=10,
           pady=5).pack(pady=5) # Gi·∫£m padding ƒë·ªÉ n·∫±m g·∫ßn n√∫t ch·ªânh s·ª≠a

    window_add_srs.protocol("WM_DELETE_WINDOW", window_add_srs.destroy)
    window_add_srs.focus_set()


# --- Main execution block for mainsrs.py ---
if __name__ == "__main__":
    # ƒê·∫£m b·∫£o file flashcards_data.json t·ªìn t·∫°i khi kh·ªüi ch·∫°y ch√≠nh
    if not os.path.exists(FLASHCARDS_MAIN_FILE):
        with open(FLASHCARDS_MAIN_FILE, "w", encoding="utf-8") as f:
            json.dump({}, f, ensure_ascii=False, indent=4) 

    srs_root_window = Tk()
    srs_root_window.withdraw() 

    create_srs_method_window(srs_root_window)

    srs_root_window.mainloop()

    srs_root_window.destroy()
    sys.exit()