from tkinter import *
from tkinter import messagebox
import json
import os
import sys
import subprocess # ƒê·ªÉ ch·∫°y Setting_flashcard.py

# --- Global Variables and Constants ---
DATA_FILE = "flashcards_data.json"
SETTINGS_FILE = "flashcards_settings.json"

flashcards = []
current_index = 0
# text_color n√†y gi·ªù s·∫Ω l√† m√†u m·∫∑c ƒë·ªãnh n·∫øu th·∫ª kh√¥ng c√≥ m√†u ri√™ng
global_text_color = "#333" 

current_unit_name = None # Name of the unit currently being studied

# --- Data Loading and Saving Functions ---

def load_flashcards_for_unit(unit_name_to_load):
    """T·∫£i d·ªØ li·ªáu flashcard cho m·ªôt unit c·ª• th·ªÉ."""
    global flashcards, current_index, current_unit_name
    
    current_unit_name = unit_name_to_load # Set the global unit name

    all_units_data = {}
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                loaded_data = json.load(f)
                if isinstance(loaded_data, dict):
                    all_units_data = loaded_data
                else:
                    all_units_data = {}
        except json.JSONDecodeError:
            messagebox.showerror("L·ªói D·ªØ Li·ªáu", "Kh√¥ng th·ªÉ ƒë·ªçc d·ªØ li·ªáu flashcard. D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c kh·ªüi t·∫°o l·∫°i.")
            all_units_data = {}
    
    # L·∫•y flashcards cho unit hi·ªán t·∫°i
    flashcards = all_units_data.get(current_unit_name, [])

    # ƒê·∫£m b·∫£o m·ªói th·∫ª c√≥ m·ªôt tr∆∞·ªùng 'color'. N·∫øu kh√¥ng c√≥, g√°n m√†u global_text_color.
    for card in flashcards:
        if "color" not in card:
            card["color"] = global_text_color

    if not flashcards:
        current_index = 0
    elif current_index >= len(flashcards):
        current_index = 0

def load_settings():
    """T·∫£i c√†i ƒë·∫∑t ·ª©ng d·ª•ng (mode, global_text_color) t·ª´ file JSON."""
    global mode, global_text_color
    if os.path.exists(SETTINGS_FILE):
        try:
            with open(SETTINGS_FILE, "r", encoding="utf-8") as f:
                settings = json.load(f)
                if "mode" in settings:
                    mode.set(settings["mode"])
                if "text_color" in settings:
                    global_text_color = settings["text_color"]
                    # label_word.config(fg=global_text_color) will be handled by show_flashcard
        except json.JSONDecodeError:
            print("Kh√¥ng th·ªÉ t·∫£i c√†i ƒë·∫∑t.")
    if not mode.get():
        mode.set("en_first")

def save_settings():
    """L∆∞u c√†i ƒë·∫∑t hi·ªán t·∫°i c·ªßa ·ª©ng d·ª•ng (mode, global_text_color) v√†o SETTINGS_FILE.
       Ch·ªâ l∆∞u c√°c c√†i ƒë·∫∑t chung, kh√¥ng ƒë·ªông ch·∫°m ƒë·∫øn 'units'.
    """
    current_settings = {}
    if os.path.exists(SETTINGS_FILE):
        try:
            with open(SETTINGS_FILE, "r", encoding="utf-8") as f:
                current_settings = json.load(f)
        except json.JSONDecodeError:
            pass

    # C·∫≠p nh·∫≠t c√°c gi√° tr·ªã c·∫ßn thay ƒë·ªïi
    current_settings["mode"] = mode.get()
    current_settings["text_color"] = global_text_color
    
    with open(SETTINGS_FILE, "w", encoding="utf-8") as f:
        json.dump(current_settings, f, ensure_ascii=False, indent=4)

# --- Core Flashcard Logic Functions ---

def show_flashcard():
    """Hi·ªÉn th·ªã m·∫∑t tr∆∞·ªõc c·ªßa flashcard d·ª±a v√†o ch·∫ø ƒë·ªô v√† m√†u ri√™ng c·ªßa th·∫ª."""
    if not flashcards:
        label_word.config(text="Unit n√†y ch∆∞a c√≥ th·∫ª n√†o.", fg="gray")
        return
    
    card = flashcards[current_index]
    # L·∫•y m√†u c·ªßa th·∫ª, n·∫øu kh√¥ng c√≥ th√¨ d√πng m√†u global_text_color m·∫∑c ƒë·ªãnh
    card_color = card.get("color", global_text_color) 

    if mode.get() == "en_first":
        label_word.config(text=card["en"], fg=card_color)
    else:
        label_word.config(text=card["vi"], fg=card_color)
    label_result.config(text="") # Clear previous result/meaning

def flip_card(event=None):
    """L·∫≠t th·∫ª b√†i (hi·ªÉn th·ªã m·∫∑t c√≤n l·∫°i)."""
    if not flashcards:
        return
    card = flashcards[current_index]
    # L·∫•y m√†u c·ªßa th·∫ª, n·∫øu kh√¥ng c√≥ th√¨ d√πng m√†u global_text_color m·∫∑c ƒë·ªãnh
    card_color = card.get("color", global_text_color)

    current_text = label_word.cget("text")

    if mode.get() == "en_first":
        if current_text == card["en"]:
            label_word.config(text=card["vi"], fg=card_color)
        else:
            label_word.config(text=card["en"], fg=card_color) # L·∫≠t l·∫°i m·∫∑t EN
    else: # mode is vi_first
        if current_text == card["vi"]:
            label_word.config(text=card["en"], fg=card_color)
        else:
            label_word.config(text=card["vi"], fg=card_color) # L·∫≠t l·∫°i m·∫∑t VI


def next_card(event=None):
    """Chuy·ªÉn sang flashcard ti·∫øp theo."""
    global current_index
    if not flashcards:
        return
    current_index = (current_index + 1) % len(flashcards)
    show_flashcard()

# --- External Script Execution ---

def open_setting_flashcard():
    """M·ªü c·ª≠a s·ªï Setting_flashcard.py ƒë·ªÉ qu·∫£n l√Ω th·∫ª."""
    root.withdraw() # ·∫®n c·ª≠a s·ªï hi·ªán t·∫°i
    try:
        # Pass the current unit name to Setting_flashcard.py
        subprocess.run(["python", "Setting_flashcard.py", current_unit_name], check=True)
    except FileNotFoundError:
        messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y file 'Setting_flashcard.py'. Vui l√≤ng ƒë·∫£m b·∫£o file n·∫±m c√πng th∆∞ m·ª•c.")
    except subprocess.CalledProcessError as e:
        messagebox.showerror("L·ªói", f"C√≥ l·ªói x·∫£y ra khi ch·∫°y 'Setting_flashcard.py': {e}")
    finally:
        root.deiconify() # Hi·ªán l·∫°i c·ª≠a s·ªï
        # T·∫£i l·∫°i d·ªØ li·ªáu v√† c√†i ƒë·∫∑t sau khi Setting_flashcard.py ƒë√≥ng
        # ƒë·ªÉ hi·ªÉn th·ªã c√°c thay ƒë·ªïi (th√™m/s·ª≠a/x√≥a th·∫ª, thay ƒë·ªïi m√†u th·∫ª/m√†u global)
        load_settings() # T·∫£i l·∫°i c√†i ƒë·∫∑t (v√≠ d·ª•: global_text_color n·∫øu ƒë·ªïi)
        load_flashcards_for_unit(current_unit_name) # T·∫£i l·∫°i th·∫ª cho unit hi·ªán t·∫°i
        show_flashcard() # C·∫≠p nh·∫≠t hi·ªÉn th·ªã th·∫ª

# --- Application Exit Handler ---

def on_closing():
    """H√†m ƒë∆∞·ª£c g·ªçi khi c·ª≠a s·ªï Tkinter ƒë√≥ng."""
    save_settings()
    root.destroy()

# --- GUI Setup ---

root = Tk()

# --- Handle Command Line Arguments for Unit Selection ---
if len(sys.argv) > 1:
    unit_name_from_main = sys.argv[1]
    root.title(f"Flashcard Ti·∫øng Anh - Unit: {unit_name_from_main}")
    # T·∫£i settings tr∆∞·ªõc ƒë·ªÉ c√≥ global_text_color cho load_flashcards_for_unit
    mode = StringVar(value="en_first") # Kh·ªüi t·∫°o mode tr∆∞·ªõc
    load_settings() 
    load_flashcards_for_unit(unit_name_from_main) 
else:
    messagebox.showerror("L·ªói Kh·ªüi ƒê·ªông", "Vui l√≤ng ch·ªçn m·ªôt Unit t·ª´ 'mainflashcard.py' ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
    sys.exit()

root.configure(bg="#f5f5f5")

# ==== KHUNG TH·∫∫ B√ÄI ====
card_frame = Frame(root, bg="white", bd=2, relief="groove", cursor="hand2", width=400, height=300) 
card_frame.pack(pady=30, padx=20)
card_frame.pack_propagate(False)

# S·ª≠ d·ª•ng global_text_color ban ƒë·∫ßu khi t·∫°o label_word
label_word = Label(card_frame, text="", font=("Arial", 28, "bold"), bg="white", fg=global_text_color, wraplength=350)
label_word.pack(padx=50, pady=30, expand=True)

label_result = Label(card_frame, text="", font=("Arial", 18), fg="green", bg="white", wraplength=350) 

# Bindings for flipping and next card
card_frame.bind("<Button-1>", flip_card) 
label_word.bind("<Button-1>", flip_card)

# ==== C√°c n√∫t ch·ª©c nƒÉng ====
button_style = {
    "font": ("Arial", 13),
    "fg": "#ffffff",
    "bg": "#007ACC",
    "activebackground": "#005F99",
    "activeforeground": "#ffffff",
    "bd": 0,
    "width": 25,
    "height": 1,
    "cursor": "hand2"
}

# Button "Chuy·ªÉn th·∫ª ti·∫øp theo"
Button(root, text="‚û°Ô∏è Th·∫ª ti·∫øp theo", command=next_card, **button_style).pack(pady=4)

# Button "Qu·∫£n l√Ω th·∫ª b√†i" (m·ªü Setting_flashcard.py)
Button(root, text="‚öôÔ∏è Qu·∫£n l√Ω th·∫ª b√†i", command=open_setting_flashcard, **button_style).pack(pady=4)

# ==== Ch·ªçn ch·∫ø ƒë·ªô hi·ªÉn th·ªã tr∆∞·ªõc ====
mode_frame = Frame(root, bg="#f5f5f5")
mode_frame.pack(pady=10)

Label(mode_frame, text="üîÅ Xem m·∫∑t n√†o tr∆∞·ªõc?", bg="#f5f5f5", font=("Arial", 12)).pack(side=LEFT, padx=5)
Radiobutton(mode_frame, text="üá¨üáß Ti·∫øng Anh", variable=mode, value="en_first", bg="#f5f5f5", command=show_flashcard).pack(side=LEFT)
Radiobutton(mode_frame, text="üáªüá≥ Ti·∫øng Vi·ªát", variable=mode, value="vi_first", bg="#f5f5f5", command=show_flashcard).pack(side=LEFT)

# --- Initial Display and Application Loop ---
show_flashcard()

root.protocol("WM_DELETE_WINDOW", on_closing)
root.mainloop()