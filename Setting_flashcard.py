from tkinter import *
from tkinter import messagebox, colorchooser
import json
import os
import sys

# --- Global Variables and Constants (shared with main app) ---
DATA_FILE = "flashcards_data.json"
SETTINGS_FILE = "flashcards_settings.json"

flashcards = [] # Danh s√°ch flashcards c·ªßa unit HI·ªÜN T·∫†I ƒëang ƒë∆∞·ª£c qu·∫£n l√Ω
# text_color global n√†y gi·ªù s·∫Ω l√† m√†u m·∫∑c ƒë·ªãnh n·∫øu th·∫ª kh√¥ng c√≥ m√†u ri√™ng
global_text_color = "#333" 

current_managed_unit_name = None

# --- Data Loading and Saving Functions ---

def load_flashcards_for_unit(unit_name_to_load):
    """T·∫£i d·ªØ li·ªáu flashcard cho m·ªôt unit c·ª• th·ªÉ t·ª´ DATA_FILE."""
    global flashcards, current_managed_unit_name

    current_managed_unit_name = unit_name_to_load

    all_units_data = {}
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                loaded_data = json.load(f)
                if isinstance(loaded_data, dict):
                    all_units_data = loaded_data
                else:
                    all_units_data = {}
        except json.JSONDecodeError:
            messagebox.showerror("L·ªói d·ªØ li·ªáu", "Kh√¥ng th·ªÉ ƒë·ªçc d·ªØ li·ªáu flashcard. D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c kh·ªüi t·∫°o l·∫°i.")
            all_units_data = {}

    # L·∫•y danh s√°ch flashcards c·ªßa unit ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
    flashcards = all_units_data.get(current_managed_unit_name, [])
    
    # ƒê·∫£m b·∫£o m·ªói th·∫ª c√≥ m·ªôt tr∆∞·ªùng 'color'. N·∫øu kh√¥ng c√≥, g√°n m√†u m·∫∑c ƒë·ªãnh.
    for card in flashcards:
        if "color" not in card:
            card["color"] = global_text_color # S·ª≠ d·ª•ng m√†u global_text_color l√†m m·∫∑c ƒë·ªãnh

def save_flashcards_for_unit():
    """L∆∞u d·ªØ li·ªáu flashcard c·ªßa unit hi·ªán t·∫°i v√†o DATA_FILE."""
    global flashcards
    if current_managed_unit_name is None:
        messagebox.showerror("L·ªói L∆∞u D·ªØ Li·ªáu", "Kh√¥ng c√≥ Unit n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ l∆∞u.")
        return

    all_units_data = {}
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                loaded_data = json.load(f)
                if isinstance(loaded_data, dict):
                    all_units_data = loaded_data
        except json.JSONDecodeError:
            pass 

    all_units_data[current_managed_unit_name] = flashcards 

    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(all_units_data, f, ensure_ascii=False, indent=4)

def load_settings():
    """T·∫£i c√†i ƒë·∫∑t ·ª©ng d·ª•ng (mode, text_color) t·ª´ SETTINGS_FILE."""
    global global_text_color
    if os.path.exists(SETTINGS_FILE):
        try:
            with open(SETTINGS_FILE, "r", encoding="utf-8") as f:
                settings = json.load(f)
                if "text_color" in settings:
                    global_text_color = settings["text_color"]
        except json.JSONDecodeError:
            print("Kh√¥ng th·ªÉ t·∫£i c√†i ƒë·∫∑t.")

def save_settings(new_text_color=None, new_mode=None):
    """L∆∞u c√†i ƒë·∫∑t hi·ªán t·∫°i c·ªßa ·ª©ng d·ª•ng v√†o SETTINGS_FILE.
       Ch·ªâ c·∫≠p nh·∫≠t text_color v√† mode (n·∫øu c√≥), b·∫£o to√†n c√°c ph·∫ßn kh√°c (v√≠ d·ª• 'units').
    """
    settings_to_save = {}
    if os.path.exists(SETTINGS_FILE):
        try:
            with open(SETTINGS_FILE, "r", encoding="utf-8") as f:
                settings_to_save = json.load(f)
        except json.JSONDecodeError:
            pass 

    if new_text_color:
        settings_to_save["text_color"] = new_text_color
    if new_mode:
        settings_to_save["mode"] = new_mode

    with open(SETTINGS_FILE, "w", encoding="utf-8") as f:
        json.dump(settings_to_save, f, ensure_ascii=False, indent=4)

# --- GUI Management Functions for Each Card ---

def refresh_card_display(list_frame):
    """L√†m m·ªõi hi·ªÉn th·ªã danh s√°ch th·∫ª b√†i."""
    for widget in list_frame.winfo_children():
        widget.destroy()

    if not flashcards:
        Label(list_frame, text="Unit n√†y ch∆∞a c√≥ th·∫ª b√†i n√†o.", font=("Arial", 14), fg="gray", bg="white").pack(pady=20)
        return

    for i, card in enumerate(flashcards):
        card_row_frame = Frame(list_frame, bg="#e0e0e0", bd=1, relief="solid", padx=5, pady=5)
        card_row_frame.pack(fill=X, pady=5)

        # L·∫•y m√†u ri√™ng c·ªßa th·∫ª, n·∫øu kh√¥ng c√≥ th√¨ d√πng m√†u global
        card_color = card.get("color", global_text_color)

        Label(card_row_frame, text=f"EN: {card['en']}", font=("Arial", 12, "bold"), bg="#e0e0e0", fg=card_color, wraplength=200).grid(row=0, column=0, sticky="w", padx=5, pady=2)
        Label(card_row_frame, text=f"VI: {card['vi']}", font=("Arial", 12), bg="#e0e0e0", wraplength=200).grid(row=1, column=0, sticky="w", padx=5, pady=2)

        btn_frame = Frame(card_row_frame, bg="#e0e0e0")
        btn_frame.grid(row=0, column=1, rowspan=2, sticky="e", padx=5)

        Button(btn_frame, text="‚úèÔ∏è S·ª≠a", command=lambda idx=i: edit_card_in_list(idx, list_frame), **small_button_style).pack(side=LEFT, padx=2)
        Button(btn_frame, text="üóëÔ∏è X√≥a", command=lambda idx=i: delete_card_from_list(idx, list_frame), bg="#CC0000", activebackground="#990000", fg="#ffffff", font=("Arial", 10), bd=0, padx=5, pady=2).pack(side=LEFT, padx=2)
        # Th√™m n√∫t ƒë·ªïi m√†u cho t·ª´ng th·∫ª
        Button(btn_frame, text="üé® M√†u Th·∫ª", command=lambda idx=i: change_card_color(idx, list_frame), **small_button_style).pack(side=LEFT, padx=2)
        
def add_new_card_dialog(list_frame):
    """M·ªü h·ªôp tho·∫°i ƒë·ªÉ th√™m m·ªôt th·∫ª b√†i m·ªõi v√†o unit hi·ªán t·∫°i."""
    def save_new_card():
        en_word = entry_en.get().strip()
        vi_word = entry_vi.get().strip()

        if en_word and vi_word:
            # Th√™m th·∫ª m·ªõi v·ªõi m√†u m·∫∑c ƒë·ªãnh l√† global_text_color
            flashcards.append({"en": en_word, "vi": vi_word, "color": global_text_color})
            save_flashcards_for_unit()
            add_window.destroy()
            refresh_card_display(list_frame)
        else:
            messagebox.showwarning("L·ªói nh·∫≠p li·ªáu", "Vui l√≤ng nh·∫≠p c·∫£ t·ª´ ti·∫øng Anh v√† ti·∫øng Vi·ªát.")

    add_window = Toplevel(root)
    add_window.title("Th√™m Th·∫ª B√†i M·ªõi")
    add_window.transient(root)
    add_window.grab_set()
    add_window.configure(bg="#f5f5f5")

    Label(add_window, text="Ti·∫øng Anh:", font=("Arial", 12), bg="#f5f5f5").grid(row=0, column=0, padx=10, pady=5, sticky="w")
    entry_en = Entry(add_window, font=("Arial", 12))
    entry_en.grid(row=0, column=1, padx=10, pady=5)

    Label(add_window, text="Ti·∫øng Vi·ªát:", font=("Arial", 12), bg="#f5f5f5").grid(row=1, column=0, padx=10, pady=5, sticky="w")
    entry_vi = Entry(add_window, font=("Arial", 12))
    entry_vi.grid(row=1, column=1, padx=10, pady=5)

    Button(add_window, text="L∆∞u Th·∫ª", command=save_new_card, **button_style).grid(row=2, columnspan=2, pady=10)

def edit_card_in_list(index, list_frame):
    """M·ªü h·ªôp tho·∫°i ƒë·ªÉ ch·ªânh s·ª≠a m·ªôt th·∫ª b√†i c·ª• th·ªÉ trong danh s√°ch."""
    if index < 0 or index >= len(flashcards):
        messagebox.showerror("L·ªói", "Ch·ªâ m·ª•c th·∫ª b√†i kh√¥ng h·ª£p l·ªá.")
        return

    card_to_edit = flashcards[index]

    def save_edited_card():
        en_word = entry_en.get().strip()
        vi_word = entry_vi.get().strip()

        if en_word and vi_word:
            card_to_edit["en"] = en_word
            card_to_edit["vi"] = vi_word
            # M√†u c·ªßa th·∫ª kh√¥ng b·ªã thay ƒë·ªïi khi ch·ªânh s·ª≠a n·ªôi dung
            save_flashcards_for_unit()
            edit_window.destroy()
            refresh_card_display(list_frame)
        else:
            messagebox.showwarning("L·ªói nh·∫≠p li·ªáu", "Vui l√≤ng nh·∫≠p c·∫£ t·ª´ ti·∫øng Anh v√† ti·∫øng Vi·ªát.")

    edit_window = Toplevel(root)
    edit_window.title("Ch·ªânh S·ª≠a Th·∫ª B√†i")
    edit_window.transient(root)
    edit_window.grab_set()
    edit_window.configure(bg="#f5f5f5")

    Label(edit_window, text="Ti·∫øng Anh:", font=("Arial", 12), bg="#f5f5f5").grid(row=0, column=0, padx=10, pady=5, sticky="w")
    entry_en = Entry(edit_window, font=("Arial", 12))
    entry_en.grid(row=0, column=1, padx=10, pady=5)
    entry_en.insert(0, card_to_edit["en"])

    Label(edit_window, text="Ti·∫øng Vi·ªát:", font=("Arial", 12), bg="#f5f5f5").grid(row=1, column=0, padx=10, pady=5, sticky="w")
    entry_vi = Entry(edit_window, font=("Arial", 12))
    entry_vi.grid(row=1, column=1, padx=10, pady=5)
    entry_vi.insert(0, card_to_edit["vi"])

    Button(edit_window, text="L∆∞u Thay ƒê·ªïi", command=save_edited_card, **button_style).grid(row=2, columnspan=2, pady=10)

def delete_card_from_list(index, list_frame):
    """X√≥a m·ªôt th·∫ª b√†i c·ª• th·ªÉ kh·ªèi danh s√°ch."""
    if index < 0 or index >= len(flashcards):
        messagebox.showerror("L·ªói", "Ch·ªâ m·ª•c th·∫ª b√†i kh√¥ng h·ª£p l·ªá.")
        return

    confirm = messagebox.askyesno("X√°c nh·∫≠n X√≥a", f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a th·∫ª b√†i '{flashcards[index]['en']}' kh√¥ng?")
    if confirm:
        flashcards.pop(index)
        save_flashcards_for_unit()
        refresh_card_display(list_frame)
        messagebox.showinfo("X√≥a th√†nh c√¥ng", "Th·∫ª b√†i ƒë√£ ƒë∆∞·ª£c x√≥a.")

def change_card_color(index, list_frame):
    """M·ªü h·ªôp tho·∫°i ch·ªçn m√†u ƒë·ªÉ thay ƒë·ªïi m√†u ch·ªØ c·ªßa m·ªôt th·∫ª b√†i c·ª• th·ªÉ."""
    if index < 0 or index >= len(flashcards):
        messagebox.showerror("L·ªói", "Ch·ªâ m·ª•c th·∫ª b√†i kh√¥ng h·ª£p l·ªá.")
        return

    current_card = flashcards[index]
    initial_color = current_card.get("color", global_text_color) # L·∫•y m√†u hi·ªán t·∫°i ho·∫∑c m·∫∑c ƒë·ªãnh

    color_code = colorchooser.askcolor(title=f"Ch·ªçn M√†u Ch·ªØ cho Th·∫ª: {current_card['en']}", initialcolor=initial_color)
    if color_code[1]: # color_code[1] l√† chu·ªói hex
        current_card["color"] = color_code[1] # C·∫≠p nh·∫≠t m√†u cho th·∫ª ƒë√≥
        save_flashcards_for_unit() # L∆∞u l·∫°i thay ƒë·ªïi m√†u c·ªßa th·∫ª
        refresh_card_display(list_frame) # L√†m m·ªõi hi·ªÉn th·ªã ƒë·ªÉ th·∫•y m√†u m·ªõi

def change_global_text_color(list_frame):
    """M·ªü h·ªôp tho·∫°i ch·ªçn m√†u ƒë·ªÉ thay ƒë·ªïi m√†u ch·ªØ GLOBAL cho t·∫•t c·∫£ flashcard."""
    global global_text_color
    color_code = colorchooser.askcolor(title="Ch·ªçn M√†u Ch·ªØ To√†n C·ª•c", initialcolor=global_text_color)
    if color_code[1]:
        global_text_color = color_code[1]
        save_settings(new_text_color=global_text_color) # L∆∞u m√†u m·ªõi v√†o c√†i ƒë·∫∑t

        # C·∫≠p nh·∫≠t m√†u cho c√°c th·∫ª ch∆∞a c√≥ m√†u ri√™ng v·ªÅ m√†u global m·ªõi
        for card in flashcards:
            if "color" not in card: # Ch·ªâ c·∫≠p nh·∫≠t n·∫øu th·∫ª ch∆∞a c√≥ m√†u ri√™ng
                 card["color"] = global_text_color
        save_flashcards_for_unit() # L∆∞u l·∫°i thay ƒë·ªïi n·∫øu c√≥ th·∫ª ƒë∆∞·ª£c c·∫≠p nh·∫≠t m√†u m·∫∑c ƒë·ªãnh
        
        refresh_card_display(list_frame) # L√†m m·ªõi ƒë·ªÉ √°p d·ª•ng m√†u m·ªõi


# --- Application Exit Handler ---

def on_closing():
    """H√†m ƒë∆∞·ª£c g·ªçi khi c·ª≠a s·ªï Tkinter ƒë√≥ng."""
    root.destroy()

# --- GUI Setup ---

root = Tk()

# --- X·ª≠ l√Ω ƒë·ªëi s·ªë d√≤ng l·ªánh ƒë·ªÉ x√°c ƒë·ªãnh Unit ---
if len(sys.argv) > 1:
    unit_name_from_args = sys.argv[1]
    root.title(f"Qu·∫£n l√Ω Th·∫ª B√†i - Unit: {unit_name_from_args}")
    load_settings() # T·∫£i m√†u ch·ªØ global tr∆∞·ªõc khi t·∫£i th·∫ª
    load_flashcards_for_unit(unit_name_from_args) # T·∫£i d·ªØ li·ªáu cho unit ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
else:
    messagebox.showerror("L·ªói Kh·ªüi ƒê·ªông", "Kh√¥ng c√≥ Unit n√†o ƒë∆∞·ª£c ch·ªçn. Vui l√≤ng m·ªü t·ª´ 'flashcard.py'.")
    sys.exit() 

root.configure(bg="#f5f5f5")

# Button Styles
button_style = {
    "font": ("Arial", 13),
    "fg": "#ffffff",
    "bg": "#007ACC",
    "activebackground": "#005F99",
    "activeforeground": "#ffffff",
    "bd": 0,
    "width": 25,
    "height": 1,
    "cursor": "hand2"
}

small_button_style = {
    "font": ("Arial", 10),
    "fg": "#ffffff",
    "bg": "#007ACC",
    "activebackground": "#005F99",
    "activeforeground": "#ffffff",
    "bd": 0,
    "padx": 5,
    "pady": 2,
    "cursor": "hand2"
}

# ==== Main Management Frame ====
main_frame = Frame(root, bg="#f5f5f5")
main_frame.pack(fill=BOTH, expand=True, padx=10, pady=10)

# ==== Title ====
Label(main_frame, text=f"Qu·∫£n l√Ω th·∫ª b√†i c·ªßa Unit: {current_managed_unit_name}", font=("Arial", 18, "bold"), bg="#f5f5f5", fg="#333", wraplength=400).pack(pady=10)

# ==== List Frame with Scrollbar ====
list_canvas = Canvas(main_frame, bg="white", bd=0, highlightthickness=0)
list_scrollbar = Scrollbar(main_frame, orient="vertical", command=list_canvas.yview)
list_scrollable_frame = Frame(list_canvas, bg="white")

list_scrollable_frame.bind(
    "<Configure>",
    lambda e: list_canvas.configure(
        scrollregion=list_canvas.bbox("all")
    )
)

list_canvas.create_window((0, 0), window=list_scrollable_frame, anchor="nw")
list_canvas.configure(yscrollcommand=list_scrollbar.set)

list_canvas.pack(side=LEFT, fill=BOTH, expand=True)
list_scrollbar.pack(side=RIGHT, fill="y")

# ==== Control Buttons ====
control_frame = Frame(main_frame, bg="#f5f5f5")
control_frame.pack(pady=10)

Button(control_frame, text="‚ûï Th√™m Th·∫ª B√†i M·ªõi", command=lambda: add_new_card_dialog(list_scrollable_frame), **button_style).pack(pady=5)
Button(control_frame, text="üé® ƒê·ªïi M√†u Ch·ªØ To√†n C·ª•c", command=lambda: change_global_text_color(list_scrollable_frame), **button_style).pack(pady=5)


# --- Initial Display ---
refresh_card_display(list_scrollable_frame)

# --- Set up graceful exit handler ---
root.protocol("WM_DELETE_WINDOW", on_closing)

root.mainloop()